syntax = "proto3";
package spire.server.store;
option go_package = "github.com/spiffe/spire/proto/spire/server/store";

import "spire/common/plugin/plugin.proto";

message KeyValue {
    // The requested or returned key.
    string key = 1;

    // The requested or returned value for the given key.
    bytes value = 2;

    // The returned revision of the store when the key was created.
    int64 create_revision = 3;

    // The returned revision of the store when the key was modified.
    int64 mod_revision = 4;

    // The returned version of the store for the requested operation.
    int64 version = 5;
}

message Range {
    // key is the first (or only) key requested.
    // If end is not given, the request affects only the single key.
    string key = 1;

    // end is the key following the last key to affect for the range [key, end).
    // If end is not given, the range is defined to contain only the key argument.
    // If end is one bit larger than the given key, then the range is all the keys
    // with the prefix (the given key).
    // If end is '\0', the range is all keys greater than or equal to the key argument.
    string end = 2;
}

message GetRequest {
    // key is the first (or only) key requested.
    // If end is not given, the request affects only the single key.
    string key = 1;

    // end is the key following the last key to affect for the range [key, end).
    // If end is not given, the range is defined to contain only the key argument.
    // If end is one bit larger than the given key, then the range is all the keys
    // with the prefix (the given key).
    // If end is '\0', the range is all keys greater than or equal to the key argument.
    string end = 2;

    // The maximum number of items returned for this request.
    // When limit is not present or <= 0, all items are returned, subject to size limits.
    int64 limit = 3;

    // When set returns only the keys and not the values.
    bool keys_only = 4;

    // When set returns only the count of the keys with the prefix.
    bool count_only = 5;

    // The point-in-time of the store to use for the range.
    // If revision is not present or <= 0, the request is over the current revision.
    int64 revision = 6;
}

message GetResponse {
    // The store revision when the request was applied.
    int64 revision = 1;

    repeated KeyValue kvs = 2;

    // More when true indicates there are more keys to return in the requested range.
    bool more = 3;

    // Total number of keys in the requested range.
    int64 total = 4;
  }

message PutRequest {
    // KVs to be written; revision and version fields are ignored.
    repeated KeyValue kvs = 1;

    // Expiration in seconds since unix epoch, applied to all items
    int64 expiry = 2;
}

message PutResponse {
    // The store revision after the request was applied.
    int64 revision = 1;
}

message DeleteRequest {
    // One or more ranges of keys to be deleted.
    repeated Range ranges = 1;
}

message DeleteResponse {
    // The store revision after the request was applied.
    int64 revision = 1;

    // Releted is the number of keys deleted by the delete range request.
    int64 deleted = 2;
}


/////////////////////////////////////////////////////////////////////////////
// Service Definition
/////////////////////////////////////////////////////////////////////////////

service Store {
    // Get one or more entries
    rpc Get(GetRequest) returns (GetResponse);

    // Put one or more entries
    rpc Create(PutRequest) returns (PutResponse);
    rpc Update(PutRequest) returns (PutResponse);

    // Delete one or more entries
    rpc Delete(DeleteRequest) returns (DeleteResponse);

    // Applies the plugin configuration
    rpc Configure(spire.common.plugin.ConfigureRequest) returns (spire.common.plugin.ConfigureResponse);
    // Returns the version and related metadata of the installed plugin
    rpc GetPluginInfo(spire.common.plugin.GetPluginInfoRequest) returns (spire.common.plugin.GetPluginInfoResponse);
}
