syntax = "proto3";
package spire.server.datastore;
option go_package = "github.com/spiffe/spire/proto/spire/server/store";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "spire/common/plugin/plugin.proto";
import "spire/common/common.proto";

message KeyValue {
    bytes key = 1;
    int64 create_revision = 2;
    int64 mod_revision = 3;
    int64 version = 4;
    bytes value = 5;
}

message GetRequest {
    // key is the first (or only) key requested.
    // If end is not given, the request looks up only the single key.
    bytes key = 1;

    // end is the key following the last key to get for the range [key, end).
    // If end is not given, the range is defined to contain only the key argument.
    // If end is one bit larger than the given key, then the range is all the keys
    // with the prefix (the given key).
    // If end is '\0', the range is all keys greater than or equal to the key argument.
    bytes end = 2;

    // limit is the maximum number of items returned for this request.
    // When limit is 0, all items are returned, subject to size limits.
    int64 limit = 3;

    // keys_only when set returns only the keys and not the values.
    bool keys_only = 4;

    // count_only when set returns only the count of the keys with the prefix.
    bool count_only = 5;

    // revision is the point-in-time of the store to use for the range.
    // If revision is not present or <= 0, the request is over the current revision.
    int64 revision = 6;
}

message GetResponse {
    // revision is the store revision when the request was applied.
    int64 revision = 1;

    repeated KeyValue kvs = 2;

    // more when true indicates there are more keys to return in the requested range.
    bool more = 3;

    // total is the number of keys within the range when requested.
    int64 total = 4;
  }

  message PutRequest {
    // key is the key, in bytes, to put into the store.
    bytes key = 1;

    // value is the value, in bytes, to associate with the key in the store.
    bytes value = 2;

    // Expiration in seconds since unix epoch
    int64 expiry = 3;
}

message PutResponse {
    // revision is the store revision after the request was applied.
    int64 revision = 1;
}

message DeleteRequest {
    // key is the first (or only) key to delete.
    bytes key = 1;

    // end is the key following the last key to delete for the range [key, end).
    // If end is not given, the range is defined to contain only the key argument.
    // If end is one bit larger than the given key, then the range is all the keys
    // with the prefix (the given key).
    // If end is '\0', the range is all keys greater than or equal to the key argument.
    bytes end = 2;
}
  
message DeleteResponse {
    // revision is the store revision after the request was applied.
    int64 revision = 1;

    // deleted is the number of keys deleted by the delete range request.
    int64 deleted = 2;
}


/////////////////////////////////////////////////////////////////////////////
// Service Definition
/////////////////////////////////////////////////////////////////////////////

service DataStore {
    // Creates a bundle
    rpc CreateBundle(CreateBundleRequest) returns (CreateBundleResponse);
    // Fetches a specific bundle
    rpc FetchBundle(FetchBundleRequest) returns (FetchBundleResponse);
    // Counts bundles (optionally filtered)
    rpc CountBundles(CountBundlesRequest) returns (CountBundlesResponse);
    // Lists bundles (optionally filtered)
    rpc ListBundles(ListBundlesRequest) returns (ListBundlesResponse);
    // Updates a specific bundle
    rpc UpdateBundle(UpdateBundleRequest) returns (UpdateBundleResponse);
    // Sets bundle contents (creates if it does not exist)
    rpc SetBundle(SetBundleRequest) returns (SetBundleResponse);
    // Appends contents from a specific bundle (creates if it does not exist)
    rpc AppendBundle(AppendBundleRequest) returns (AppendBundleResponse);
    // Deletes a specific bundle
    rpc DeleteBundle(DeleteBundleRequest) returns (DeleteBundleResponse);
    // Prunes all expired certificates and JWT signing keys from a bundle
    rpc PruneBundle(PruneBundleRequest) returns (PruneBundleResponse);

    // Creates an attested node
    rpc CreateAttestedNode(CreateAttestedNodeRequest) returns (CreateAttestedNodeResponse);
    // Fetches a specific attested node
    rpc FetchAttestedNode(FetchAttestedNodeRequest) returns (FetchAttestedNodeResponse);
    // Counts attested nodes
    rpc CountAttestedNodes(CountAttestedNodesRequest) returns (CountAttestedNodesResponse);
    // Lists attested nodes (optionally filtered)
    rpc ListAttestedNodes(ListAttestedNodesRequest) returns (ListAttestedNodesResponse);
    // Updates a specific attested node
    rpc UpdateAttestedNode(UpdateAttestedNodeRequest) returns (UpdateAttestedNodeResponse);
    // Deletes a specific attested node
    rpc DeleteAttestedNode(DeleteAttestedNodeRequest) returns (DeleteAttestedNodeResponse);

    // Sets the set of selectors for a specific node id
    rpc SetNodeSelectors(SetNodeSelectorsRequest) returns (SetNodeSelectorsResponse);
    // Gets the set of node selectors for a specific node id
    rpc GetNodeSelectors(GetNodeSelectorsRequest) returns (GetNodeSelectorsResponse);
    // Lists all node selectors
    rpc ListNodeSelectors(ListNodeSelectorsRequest) returns (ListNodeSelectorsResponse);

    // Creates a registration entry
    rpc CreateRegistrationEntry(CreateRegistrationEntryRequest) returns (CreateRegistrationEntryResponse);
    // Fetches a specific registration entry
    rpc FetchRegistrationEntry(FetchRegistrationEntryRequest) returns (FetchRegistrationEntryResponse);
    // Counts registration entries
    rpc CountRegistrationEntries(CountRegistrationEntriesRequest) returns (CountRegistrationEntriesResponse);
    // Lists registration entries (optionally filtered)
    rpc ListRegistrationEntries(ListRegistrationEntriesRequest) returns (ListRegistrationEntriesResponse);
    // Updates a specific registration entry
    rpc UpdateRegistrationEntry(UpdateRegistrationEntryRequest) returns (UpdateRegistrationEntryResponse);
    // Deletes a specific registration entry
    rpc DeleteRegistrationEntry(DeleteRegistrationEntryRequest) returns (DeleteRegistrationEntryResponse);
    // Prunes all registration entries that expire before the specified timestamp
    rpc PruneRegistrationEntries(PruneRegistrationEntriesRequest) returns (PruneRegistrationEntriesResponse);

    // Creates a join token
    rpc CreateJoinToken(CreateJoinTokenRequest) returns (CreateJoinTokenResponse);
    // Fetches a specific join token
    rpc FetchJoinToken(FetchJoinTokenRequest) returns (FetchJoinTokenResponse);
    // Delete a specific join token
    rpc DeleteJoinToken(DeleteJoinTokenRequest) returns (DeleteJoinTokenResponse);
    // Prunes all join tokens that expire before the specified timestamp
    rpc PruneJoinTokens(PruneJoinTokensRequest) returns (PruneJoinTokensResponse);

    // Applies the plugin configuration
    rpc Configure(spire.common.plugin.ConfigureRequest) returns (spire.common.plugin.ConfigureResponse);
    // Returns the version and related metadata of the installed plugin
    rpc GetPluginInfo(spire.common.plugin.GetPluginInfoRequest) returns (spire.common.plugin.GetPluginInfoResponse);
}
