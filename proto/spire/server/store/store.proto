syntax = "proto3";
package spire.server.store;
option go_package = "github.com/spiffe/spire/proto/spire/server/store";

import "spire/common/plugin/plugin.proto";

// Compare defines how Version is used in transaction comparisons.
enum Compare {
    // Default, no kv version check for the operation.
    NONE = 0;

    // Ensure the given key(s) do not already exist in the store.
    NOT_PRESENT = 1;

    // Ensure the given key(s) already exist in the store.
    PRESENT = 2;

    // Ensure the current version of the given key(s) exactly matches the supplied version.
    EQUALS = 3;
}

// KeyValue represents the central request/response object for the store.
message KeyValue {
    // The requested or returned key.
    string key = 1;

    // Set to request a range rather than a single key.
    string end = 2;

    // The requested or returned value for the given key.
    bytes value = 3;

    // Expiration in seconds since unix epoch.
    int64 expiry = 4;

    // The returned revision of the store when the key was created.
    int64 create_revision = 5;

    // The returned revision of the store when the key was modified.
    int64 mod_revision = 6;

    // The returned version of the item for the requested operation.
    // Version may also be set for delete, put, or transaction operations.
    int64 version = 7;

    // Compare defines how Version is handled in transactions.
    Compare compare = 8;
}

message GetRequest {
    // key is the first (or only) key requested.
    // If end is not given, the request affects only the single key.
    string key = 1;

    // end is the key following the last key to affect for the range [key, end).
    // If end is not given, the range is defined to contain only the key argument.
    // If end is one bit larger than the given key, then the range is all the keys
    // with the prefix (the given key).
    // If end is '\0', the range is all keys greater than or equal to the key argument.
    string end = 2;

    // The maximum number of items returned for this request.
    // When limit is not present or <= 0, all items are returned, subject to size limits.
    int64 limit = 3;

    // When set returns only the keys and not the values.
    bool keys_only = 4;

    // When set returns only the count of the keys with the prefix.
    bool count_only = 5;

    // The point-in-time of the store to use for the range.
    // If revision is not present or <= 0, the request is over the current revision.
    int64 revision = 6;
}

message GetResponse {
    // The store revision when the get request was applied.
    int64 revision = 1;

    repeated KeyValue kvs = 2;

    // More when true indicates there are more keys to return in the requested range.
    bool more = 3;

    // Total number of keys in the requested range.
    int64 total = 4;
}

// Operation defines the action to be taken for a given set of keys as part of a set transaction.
enum Operation {
    // No operation.
    NOOP = 0;

    // Add a comparison constraint to the transaction without any action.
    COMPARE = 1;

    // Delete the assocaiated key(s), constrained by Version, if present in kvs.
    DELETE = 2;

    // Create or update the associated key(s), constrained by Version, if present in kvs.
    PUT = 3;
}

// Set request element defines a single write (create, delete, update) operation.
message SetRequestElement {
    // Operation to be performed.
    Operation operation = 1;

    // One or more keys, with values, versions, expiry, and/or compare types as needed.
    repeated KeyValue kvs = 2;
}

// Set executes one or more write (create, delete, update) operations together as a single transaction.
message SetRequest {
    // One or more operations to be performed as a single transaction.
    repeated SetRequestElement elements = 1;
}

message SetResponse {
    // The store revision after the  was applied.
    int64 revision = 1;
}

// Watch returns a stream of store updates to keep caches current
message WatchRequest {
    // The key to watch.
    string key = 1;

    // Set to request a range rather than a single key.
    string end = 2;

    // The store revision to begin reporting key/range change events.
    string rev = 3;
}

message WatchResponse {
    // Operation that was performed.
    Operation op = 1;

    // The object after the operation.
    KeyValue kv = 2;

    // The object prior to the operation.
    KeyValue prev = 3;
}


/////////////////////////////////////////////////////////////////////////////
// Service Definition
/////////////////////////////////////////////////////////////////////////////

service Store {
    // Applies the plugin configuration
    rpc Configure(spire.common.plugin.ConfigureRequest) returns (spire.common.plugin.ConfigureResponse);

    // Returns the version and related metadata of the installed plugin
    rpc GetPluginInfo(spire.common.plugin.GetPluginInfoRequest) returns (spire.common.plugin.GetPluginInfoResponse);

    // Get one or more items from the store.
    rpc Get(GetRequest) returns (GetResponse);

    // Set one or more items (create, delete, update, and set/upsert) in the store as a single transaction.
    rpc Set(SetRequest) returns (SetResponse);

    // Watch returns a stream of store updates to keep caches current
    // rpc Watch(WatchRequest) returns (stream WatchResponse);
}
